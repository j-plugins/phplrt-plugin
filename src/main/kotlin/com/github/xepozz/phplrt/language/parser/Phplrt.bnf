{
  parserClass="com.github.xepozz.phplrt.language.parser.PhplrtParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Phplrt"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.xepozz.phplrt.psi"
  psiImplPackage="com.github.xepozz.phplrt.psi.impl"

  elementTypeHolderClass="com.github.xepozz.phplrt.psi.PhplrtTypes"
  elementTypeClass="com.github.xepozz.phplrt.language.psi.PhplrtElementType"
  tokenTypeClass="com.github.xepozz.phplrt.language.psi.PhplrtTokenType"

  psiImplUtilClass="com.github.xepozz.phplrt.language.psi.impl.PhplrtPsiImplUtil"

  elementTypeFactory("metaDecl")="com.github.xepozz.phplrt.language.psi.PhplrtElementTypeFactory.factory"
}

phplrtFile ::= item_*

private item_ ::= (metaDecl|ruleDecl|COMMENT)


metaDecl ::= META_START (((TOKEN|SKIP|PRAGMA) identifier VALUE) | (INCLUDE VALUE))
{
    pin=1
//    mixin="com.github.xepozz.phplrt.psi.impl.PhplrtNamedElementImpl"
    implements=["com.github.xepozz.phplrt.language.psi.PhplrtNamedElement"]
    extends="com.github.xepozz.phplrt.language.psi.PhplrtMetaDeclarationBaseImpl"
    stubClass="com.github.xepozz.phplrt.language.psi.PhplrtMetaDeclarationStub"
    methods=[getName getValue getNameIdentifier isToken isSkip isPragma getReferences]
}
//ruleDecl ::= (ruleModifier? identifier (CODE_DELIMITER CURLY_BRACKETS_LEFT INLINE_CODE CURLY_BRACKETS_RIGHT)? COLON expressions SEMICOLON)
ruleDecl ::= ruleModifier? identifier code? COLON expressions SEMICOLON
{
    pin=1
    mixin="com.github.xepozz.phplrt.language.psi.impl.PhplrtNamedElementImpl"
    implements=["com.github.xepozz.phplrt.language.psi.PhplrtNamedElement"]
    methods=[getName setName getNameIdentifier getReferences]
}
code ::= CODE_DELIMITER INLINE_CODE
{
    pin=1
    extends="com.github.xepozz.phplrt.language.psi.impl.PhplrtCodeBaseImpl"
    implements=["com.intellij.psi.PsiLanguageInjectionHost"]
}
expressions ::= expression (operator? expression)*
expression ::= (expression_inner | grouped_expression) quantifier?
private grouped_expression ::= PARENTHESES_OPEN expressions PARENTHESES_CLOSE
private expression_inner ::= (tokenReference | ruleReference)
quantifier ::= QUANTIFIER_ZERO_ONE | QUANTIFIER_ANY | QUANTIFIER_ONE_INFINITE
ruleReference ::= identifier PARENTHESES_OPEN PARENTHESES_CLOSE
{
    mixin="com.github.xepozz.phplrt.language.psi.impl.PhplrtNamedElementImpl"
    implements=["com.github.xepozz.phplrt.language.psi.PhplrtNamedElement"]
    methods=[getName setName getNameIdentifier getReferences]
}
tokenReference ::= hiddenTokenReference | visibleTokenReference
{
    mixin="com.github.xepozz.phplrt.language.psi.impl.PhplrtNamedElementImpl"
    implements=["com.github.xepozz.phplrt.language.psi.PhplrtNamedElement"]
    extends="com.github.xepozz.phplrt.language.psi.PhplrtTokenReferenceBaseImpl"
    stubClass=["com.github.xepozz.phplrt.language.psi.PhplrtTokenReferenceStub"]
    methods=[getName setName getNameIdentifier getReferences]
}
private hiddenTokenReference ::= (DOUBLE_COLON identifier DOUBLE_COLON)
{
    pin=2
}
private visibleTokenReference ::= (LEFT_ARROW identifier RIGHT_ARROW)
{
    pin=2
}
identifier ::= LITERAL
//{
//    mixin="com.github.xepozz.phplrt.psi.impl.PhplrtNamedElementImpl"
//    implements=["com.github.xepozz.phplrt.psi.PhplrtNamedElement" "com.intellij.model.psi.PsiExternalReferenceHost"]
//    methods=[getName setName getNameIdentifier]
//}
operator ::= OP_OR
ruleModifier ::= SHARP
