// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Phplrt.flex

package com.github.xepozz.phplrt.language.parser;

import com.intellij.psi.tree.IElementType;
import com.github.xepozz.phplrt.psi.PhplrtTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


public class PhplrtLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;
  public static final int WAITING_LITERAL = 4;
  public static final int META_DECLARATION = 6;
  public static final int RULE_DECLARATION = 8;
  public static final int INLINE_CODE = 10;
  public static final int BEFORE_INLINE_CODE = 12;
  public static final int AFTER_INLINE_CODE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\1\6\1\0\1\7\1\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\0\1\15\1\0\1\16\12\17\1\20"+
    "\1\21\1\22\1\0\1\23\1\24\1\0\32\25\1\0"+
    "\1\26\2\0\1\25\1\0\1\27\1\25\1\30\1\31"+
    "\1\32\1\25\1\33\1\25\1\34\1\25\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\25\1\43\1\44\1\45"+
    "\1\46\5\25\1\47\1\50\1\51\7\0\1\3\32\0"+
    "\1\1\u01df\0\1\1\177\0\13\1\35\0\2\3\5\0"+
    "\1\1\57\0\1\1\240\0\1\1\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\2\1\6\1\7\4\1\1\10\1\11\1\12\1\13"+
    "\1\1\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\3\1\1\23\1\24\1\25\1\26\1\0\1\27\2\6"+
    "\4\0\1\30\1\31\4\0\1\22\1\0\1\6\5\0"+
    "\1\22\1\0\2\22\3\0\1\32\2\0\1\22\1\0"+
    "\1\22\3\27\1\22\1\27\2\0\1\33\1\22\2\0"+
    "\1\22\1\0\1\27\4\22\1\0\1\34\2\22\2\0"+
    "\1\27\1\0\1\22\1\27\2\0\1\22\1\0\2\27"+
    "\1\22\1\27\1\35\3\27\1\22\2\0\1\22\1\0"+
    "\2\27\1\22\1\27\10\22\2\0\2\27\2\0\1\22"+
    "\3\0\1\22\1\0\4\22\1\0\1\22\1\0\2\27"+
    "\1\0\1\27\1\0\2\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\374\0\u0126"+
    "\0\u0150\0\u017a\0\u0150\0\u0150\0\u01a4\0\u01ce\0\u01f8\0\u0222"+
    "\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e\0\u0150\0\u0150"+
    "\0\u0150\0\u0150\0\u0348\0\u0372\0\u0150\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0150\0\u0150\0\u0150"+
    "\0\u0150\0\u0444\0\u046e\0\u0498\0\u04c2\0\u04ec\0\u0516\0\u0540"+
    "\0\u056a\0\u0150\0\u0150\0\u03c6\0\u03f0\0\u0594\0\u05be\0\u05e8"+
    "\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba\0\u06e4\0\u070e\0\u0738"+
    "\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a\0\u0834\0\u0150\0\u085e"+
    "\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a\0\u0984\0\u09ae"+
    "\0\u0612\0\u09d8\0\u0a02\0\u0150\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0150"+
    "\0\u0bfa\0\u0c24\0\u0c4e\0\u0c78\0\u0ad4\0\u0ca2\0\u0ccc\0\u0cf6"+
    "\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c\0\u0e46"+
    "\0\u0150\0\u0a56\0\u0a80\0\u08dc\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee"+
    "\0\u0f18\0\u0f42\0\u0f6c\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e"+
    "\0\u1068\0\u1092\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e"+
    "\0\u11b8\0\u11e2\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de"+
    "\0\u1308\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e"+
    "\0\u1260\0\u13da\0\u1458\0\u142e\0\u1482\0\u11e2\0\u120c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\4\12\1\11\1\13\1\14\6\11\1\15\6\11"+
    "\1\16\1\11\20\16\3\11\1\17\1\20\1\12\1\20"+
    "\1\12\11\17\1\21\33\17\1\11\4\12\11\11\1\15"+
    "\6\11\1\22\1\11\20\22\4\11\4\12\11\11\1\15"+
    "\15\11\1\23\5\11\1\24\1\11\1\25\1\26\5\11"+
    "\4\12\4\11\1\27\1\30\1\31\1\32\1\33\1\15"+
    "\1\11\1\34\1\35\1\36\1\37\1\40\1\16\1\11"+
    "\20\16\1\11\1\41\1\11\5\42\1\43\2\42\1\44"+
    "\5\42\1\45\30\42\1\46\1\42\1\47\1\11\4\12"+
    "\11\11\1\15\30\11\1\50\3\11\4\12\11\11\1\15"+
    "\32\11\1\51\53\0\4\12\60\0\1\52\2\0\1\53"+
    "\52\0\1\16\5\0\1\16\1\0\20\16\3\0\2\17"+
    "\1\0\1\17\1\0\46\17\1\20\1\12\1\20\1\12"+
    "\47\17\1\0\1\17\1\0\6\17\1\54\2\17\1\55"+
    "\33\17\17\0\1\22\5\0\1\22\1\0\20\22\43\0"+
    "\1\56\54\0\1\57\43\0\1\60\55\0\1\61\33\0"+
    "\1\62\46\0\1\63\31\0\5\42\1\64\2\42\1\65"+
    "\5\42\1\66\30\42\1\0\1\42\1\0\2\64\3\0"+
    "\1\42\2\64\1\0\15\64\1\0\23\64\2\65\4\0"+
    "\2\65\1\42\15\65\1\0\23\65\13\42\1\67\2\42"+
    "\1\70\33\42\13\0\1\71\36\0\2\53\1\0\47\53"+
    "\2\17\1\0\1\17\1\0\6\17\1\72\36\17\2\55"+
    "\1\0\1\55\1\53\45\55\30\0\1\73\50\0\1\74"+
    "\56\0\1\75\52\0\1\76\14\0\13\42\1\77\2\42"+
    "\1\100\33\42\13\77\1\101\36\77\2\70\1\42\2\102"+
    "\11\70\1\103\33\70\13\71\1\104\36\71\2\72\1\71"+
    "\1\72\1\71\45\72\36\0\1\105\46\0\1\106\60\0"+
    "\1\107\41\0\1\110\17\0\13\77\1\111\36\77\2\100"+
    "\3\42\11\100\1\112\33\100\13\113\1\101\2\113\1\114"+
    "\33\113\2\102\1\42\2\102\1\115\2\102\1\116\5\102"+
    "\1\117\30\102\1\53\1\102\1\53\2\70\1\42\2\102"+
    "\6\70\1\120\2\70\1\103\33\70\13\71\1\104\2\71"+
    "\1\121\33\71\46\0\1\122\42\0\1\123\52\0\1\124"+
    "\11\0\13\77\1\111\2\77\1\42\33\77\2\100\3\42"+
    "\6\100\1\125\2\100\1\112\33\100\13\113\1\101\36\113"+
    "\5\114\1\126\2\114\1\127\2\114\1\130\2\114\1\131"+
    "\30\114\1\71\1\114\1\71\2\115\1\0\2\53\1\102"+
    "\2\115\1\53\15\115\1\53\23\115\2\116\1\0\3\53"+
    "\2\116\1\102\15\116\1\53\23\116\2\102\1\42\10\102"+
    "\1\132\2\102\1\70\33\102\2\120\1\133\2\134\6\120"+
    "\1\135\2\120\1\136\33\120\31\0\1\137\47\0\1\140"+
    "\22\0\2\125\3\133\6\125\1\141\2\125\1\142\33\125"+
    "\2\126\3\71\1\114\2\126\1\71\2\126\1\143\12\126"+
    "\1\71\23\126\2\127\4\71\2\127\1\114\2\127\1\144"+
    "\12\127\1\71\23\127\5\114\1\126\2\114\1\127\2\114"+
    "\1\130\2\114\1\145\30\114\1\71\1\114\1\71\13\114"+
    "\1\146\2\114\1\147\33\114\2\132\1\77\10\132\1\150"+
    "\36\132\5\133\1\151\2\133\1\152\2\133\1\153\2\133"+
    "\1\154\30\133\1\77\1\133\1\77\2\134\1\133\2\134"+
    "\1\155\2\134\1\156\2\134\1\157\2\134\1\160\30\134"+
    "\1\132\1\134\1\132\2\120\1\133\2\134\6\120\1\135"+
    "\2\120\1\103\35\120\1\133\2\134\11\120\1\136\33\120"+
    "\32\0\1\161\17\0\2\125\3\133\6\125\1\141\2\125"+
    "\1\112\35\125\3\133\11\125\1\142\33\125\2\126\3\71"+
    "\1\114\2\126\1\71\2\126\1\143\2\126\1\162\7\126"+
    "\1\71\23\126\2\127\4\71\2\127\1\114\2\127\1\144"+
    "\2\127\1\163\7\127\1\71\23\127\13\113\1\101\2\113"+
    "\1\164\33\113\2\147\3\114\11\147\1\165\33\147\2\132"+
    "\1\77\10\132\1\150\2\132\1\102\33\132\2\151\3\77"+
    "\1\133\2\151\1\77\2\151\1\166\12\151\1\77\23\151"+
    "\2\152\4\77\2\152\1\133\2\152\1\167\12\152\1\77"+
    "\23\152\5\133\1\151\2\133\1\152\2\133\1\153\2\133"+
    "\1\170\30\133\1\77\1\133\1\77\13\133\1\171\2\133"+
    "\1\125\33\133\2\155\1\77\2\132\1\134\2\155\1\132"+
    "\2\155\1\172\12\155\1\132\23\155\2\156\1\77\3\132"+
    "\2\156\1\134\2\156\1\173\12\156\1\132\23\156\2\134"+
    "\1\133\2\134\1\155\2\134\1\156\2\134\1\157\2\134"+
    "\1\174\30\134\1\132\1\134\1\132\2\134\1\133\10\134"+
    "\1\175\2\134\1\120\33\134\2\147\3\114\6\147\1\176"+
    "\2\147\1\165\33\147\2\151\3\77\1\133\2\151\1\77"+
    "\2\151\1\166\2\151\1\177\7\151\1\77\23\151\2\152"+
    "\4\77\2\152\1\133\2\152\1\167\2\152\1\200\7\152"+
    "\1\77\23\152\5\42\1\177\2\42\1\200\2\42\1\133"+
    "\2\42\1\112\33\42\13\77\1\111\2\77\1\133\33\77"+
    "\2\155\1\77\2\132\1\134\2\155\1\132\2\155\1\172"+
    "\2\155\1\201\7\155\1\132\23\155\2\156\1\77\3\132"+
    "\2\156\1\134\2\156\1\173\2\156\1\202\7\156\1\132"+
    "\23\156\2\102\1\42\2\102\1\201\2\102\1\202\2\102"+
    "\1\134\2\102\1\103\33\102\2\132\1\77\10\132\1\150"+
    "\2\132\1\134\33\132\2\176\3\203\6\176\1\204\2\176"+
    "\1\205\33\176\2\177\3\42\3\177\1\65\5\177\1\206"+
    "\7\177\1\42\20\177\1\64\1\177\1\64\2\200\3\42"+
    "\1\64\10\200\1\207\7\200\1\42\20\200\1\65\1\200"+
    "\1\65\2\201\1\42\2\102\3\201\1\116\5\201\1\210"+
    "\7\201\1\102\20\201\1\115\1\201\1\115\2\202\1\42"+
    "\2\102\1\115\10\202\1\211\7\202\1\102\20\202\1\116"+
    "\1\202\1\116\5\203\1\212\2\203\1\213\2\203\1\214"+
    "\2\203\1\215\30\203\1\113\1\203\1\113\2\176\3\203"+
    "\6\176\1\204\2\176\1\165\35\176\3\203\11\176\1\205"+
    "\33\176\2\177\4\42\2\177\1\42\2\177\1\151\2\177"+
    "\1\100\7\177\1\42\23\177\2\200\4\42\2\200\1\42"+
    "\2\200\1\152\2\200\1\100\7\200\1\42\23\200\2\201"+
    "\1\42\3\102\2\201\1\102\2\201\1\155\2\201\1\70"+
    "\7\201\1\102\23\201\2\202\1\42\3\102\2\202\1\102"+
    "\2\202\1\156\2\202\1\70\7\202\1\102\23\202\2\212"+
    "\3\113\1\203\2\212\1\113\2\212\1\216\12\212\1\113"+
    "\23\212\2\213\4\113\2\213\1\203\2\213\1\217\12\213"+
    "\1\113\23\213\5\203\1\212\2\203\1\213\2\203\1\214"+
    "\2\203\1\220\30\203\1\113\1\203\1\113\13\203\1\221"+
    "\2\203\1\176\33\203\2\212\3\113\1\203\2\212\1\113"+
    "\2\212\1\216\2\212\1\222\7\212\1\113\23\212\2\213"+
    "\4\113\2\213\1\203\2\213\1\217\2\213\1\223\7\213"+
    "\1\113\23\213\5\114\1\222\2\114\1\223\2\114\1\224"+
    "\2\114\1\165\33\114\13\113\1\101\2\113\1\203\33\113"+
    "\2\222\3\114\3\222\1\127\2\222\1\225\2\222\1\226"+
    "\7\222\1\114\20\222\1\126\1\222\1\126\2\223\3\114"+
    "\1\126\5\223\1\227\2\223\1\230\7\223\1\114\20\223"+
    "\1\127\1\223\1\127\5\203\1\212\2\203\1\213\2\203"+
    "\1\214\2\203\1\231\30\203\1\113\1\203\1\113\2\222"+
    "\3\114\3\222\1\127\2\222\1\225\2\222\1\232\7\222"+
    "\1\114\20\222\1\126\1\222\1\126\2\222\4\114\2\222"+
    "\1\114\2\222\1\233\2\222\1\147\7\222\1\114\23\222"+
    "\2\223\3\114\1\126\5\223\1\227\2\223\1\234\7\223"+
    "\1\114\20\223\1\127\1\223\1\127\2\223\4\114\2\223"+
    "\1\114\2\223\1\235\2\223\1\147\7\223\1\114\23\223"+
    "\2\212\3\113\1\203\2\212\1\113\2\212\1\216\2\212"+
    "\1\236\7\212\1\113\23\212\2\213\4\113\2\213\1\203"+
    "\2\213\1\217\2\213\1\237\7\213\1\113\23\213";

  private static int [] zzUnpacktrans() {
    int [] result = new int[5292];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\2\11\12\1\4\11\2\1\5\11"+
    "\4\1\4\11\1\0\3\1\4\0\2\11\4\0\1\1"+
    "\1\0\1\1\5\0\1\1\1\0\2\1\3\0\1\11"+
    "\2\0\1\1\1\0\6\1\2\0\1\11\1\1\2\0"+
    "\1\1\1\0\5\1\1\0\1\11\2\1\2\0\1\1"+
    "\1\0\2\1\2\0\1\1\1\0\4\1\1\11\4\1"+
    "\2\0\1\1\1\0\14\1\2\0\2\1\2\0\1\1"+
    "\3\0\1\1\1\0\4\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    int braceCount;
    private Stack<Integer> stack = new Stack<>();

    public void yycleanState(int newState) {
        stack.clear();
        yypushState(newState);
    }

    public void yypushState(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopState() {
        yybegin(stack.pop());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhplrtLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 30: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 31: break;
          case 3:
            { yypushState(RULE_DECLARATION); return PhplrtTypes.SHARP;
            }
          // fall through
          case 32: break;
          case 4:
            { yypushState(META_DECLARATION); return PhplrtTypes.META_START;
            }
          // fall through
          case 33: break;
          case 5:
            { yypushState(RULE_DECLARATION); return PhplrtTypes.LITERAL;
            }
          // fall through
          case 34: break;
          case 6:
            { yycleanState(YYINITIAL); return PhplrtTypes.VALUE;
            }
          // fall through
          case 35: break;
          case 7:
            { yypushState(WAITING_VALUE); return PhplrtTypes.LITERAL;
            }
          // fall through
          case 36: break;
          case 8:
            { return PhplrtTypes.PARENTHESES_OPEN;
            }
          // fall through
          case 37: break;
          case 9:
            { return PhplrtTypes.PARENTHESES_CLOSE;
            }
          // fall through
          case 38: break;
          case 10:
            { return PhplrtTypes.QUANTIFIER_ANY;
            }
          // fall through
          case 39: break;
          case 11:
            { return PhplrtTypes.QUANTIFIER_ONE_INFINITE;
            }
          // fall through
          case 40: break;
          case 12:
            { return PhplrtTypes.COLON;
            }
          // fall through
          case 41: break;
          case 13:
            { yycleanState(YYINITIAL); return PhplrtTypes.SEMICOLON;
            }
          // fall through
          case 42: break;
          case 14:
            { return PhplrtTypes.LEFT_ARROW;
            }
          // fall through
          case 43: break;
          case 15:
            { return PhplrtTypes.RIGHT_ARROW;
            }
          // fall through
          case 44: break;
          case 16:
            { return PhplrtTypes.QUANTIFIER_ZERO_ONE;
            }
          // fall through
          case 45: break;
          case 17:
            { return PhplrtTypes.OP_OR;
            }
          // fall through
          case 46: break;
          case 18:
            { 
            }
          // fall through
          case 47: break;
          case 19:
            { braceCount++;
            }
          // fall through
          case 48: break;
          case 20:
            { if (braceCount > 0) braceCount--; else { yypushback(1); yypushState(AFTER_INLINE_CODE); return PhplrtTypes.INLINE_CODE; }
            }
          // fall through
          case 49: break;
          case 21:
            { yypushState(INLINE_CODE);
            }
          // fall through
          case 50: break;
          case 22:
            { yypushState(RULE_DECLARATION);
            }
          // fall through
          case 51: break;
          case 23:
            { return PhplrtTypes.COMMENT;
            }
          // fall through
          case 52: break;
          case 24:
            { yypushState(BEFORE_INLINE_CODE); return PhplrtTypes.CODE_DELIMITER;
            }
          // fall through
          case 53: break;
          case 25:
            { return PhplrtTypes.DOUBLE_COLON;
            }
          // fall through
          case 54: break;
          case 26:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.SKIP;
            }
          // fall through
          case 55: break;
          case 27:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.TOKEN;
            }
          // fall through
          case 56: break;
          case 28:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.PRAGMA;
            }
          // fall through
          case 57: break;
          case 29:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.INCLUDE;
            }
          // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
