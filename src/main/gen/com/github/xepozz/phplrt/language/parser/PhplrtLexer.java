// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Phplrt.flex

package com.github.xepozz.phplrt.language.parser;

import com.intellij.psi.tree.IElementType;
import com.github.xepozz.phplrt.psi.PhplrtTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


public class PhplrtLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int META_DECLARATION = 2;
  public static final int RULE_DECLARATION = 4;
  public static final int WAITING_VALUE = 6;
  public static final int WAITING_LITERAL = 8;
  public static final int WAITING_PATH = 10;
  public static final int INLINE_CODE = 12;
  public static final int BEFORE_INLINE_CODE = 14;
  public static final int AFTER_INLINE_CODE = 16;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8, 8
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\1\0\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\1\0\1\17\12\20"+
    "\1\21\1\22\1\23\1\0\1\24\1\25\1\0\32\26"+
    "\1\0\1\27\2\0\1\26\1\0\1\30\1\26\1\31"+
    "\1\32\1\33\1\26\1\34\1\26\1\35\1\26\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\26\1\44\1\45"+
    "\1\46\1\47\5\26\1\50\1\51\1\52\7\0\1\3"+
    "\32\0\1\53\u01df\0\1\53\177\0\13\53\35\0\2\3"+
    "\5\0\1\53\57\0\1\53\240\0\1\53\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\1\1\5\4\1"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\2\1\20\1\21\1\1"+
    "\1\2\1\1\1\22\3\1\1\23\1\24\1\25\1\26"+
    "\1\0\1\27\4\0\1\30\1\31\5\20\4\0\1\22"+
    "\5\0\2\20\1\0\1\22\1\0\2\22\3\0\1\32"+
    "\1\0\2\20\1\0\1\22\2\0\1\22\3\27\1\22"+
    "\1\27\2\0\1\33\1\22\2\0\1\22\1\0\1\27"+
    "\4\22\1\0\1\34\2\22\2\0\1\27\1\0\1\22"+
    "\1\27\2\0\1\22\1\0\2\27\1\22\1\27\1\35"+
    "\3\27\2\22\2\0\1\22\1\0\2\27\1\22\1\27"+
    "\10\22\2\0\2\27\2\22\2\0\1\22\3\0\1\22"+
    "\3\0\5\22\1\0\1\22\1\0\2\27\1\0\1\27"+
    "\1\0\2\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u01b8\0\u018c\0\u018c\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u018c\0\u018c\0\u018c\0\u018c\0\u02ec"+
    "\0\u0318\0\u018c\0\u018c\0\u018c\0\u018c\0\u018c\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0"+
    "\0\u04fc\0\u018c\0\u018c\0\u018c\0\u018c\0\u0528\0\u0554\0\u0580"+
    "\0\u05ac\0\u05d8\0\u0604\0\u018c\0\u018c\0\u0630\0\u065c\0\u03f4"+
    "\0\u0688\0\u06b4\0\u04a4\0\u04d0\0\u06e0\0\u070c\0\u0738\0\u0764"+
    "\0\u0790\0\u07bc\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4"+
    "\0\u08f0\0\u091c\0\u0948\0\u0974\0\u09a0\0\u09cc\0\u018c\0\u09f8"+
    "\0\u0a24\0\u0a50\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58"+
    "\0\u0b84\0\u0bb0\0\u0bdc\0\u018c\0\u0c08\0\u0c34\0\u018c\0\u0c60"+
    "\0\u0c8c\0\u0cb8\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0"+
    "\0\u0dec\0\u0e18\0\u018c\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\u06e0"+
    "\0\u0ef4\0\u0f20\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028"+
    "\0\u1054\0\u1080\0\u10ac\0\u018c\0\u04a4\0\u04d0\0\u0898\0\u10d8"+
    "\0\u1104\0\u1130\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238"+
    "\0\u1264\0\u1290\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398"+
    "\0\u13c4\0\u13f0\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8"+
    "\0\u1524\0\u1550\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658"+
    "\0\u1684\0\u16b0\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8"+
    "\0\u17e4\0\u0ffc\0\u13f0\0\u1810\0\u141c\0\u183c\0\u0f78\0\u0fa4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\12\5\13\1\12\1\14\1\15\6\12\1\16\6\12"+
    "\1\17\1\12\20\17\3\12\1\13\1\12\5\13\11\12"+
    "\1\16\15\12\1\20\5\12\1\21\1\12\1\22\1\23"+
    "\4\12\1\13\1\12\5\13\4\12\1\24\1\25\1\26"+
    "\1\27\1\30\1\16\1\12\1\31\1\32\1\33\1\34"+
    "\1\35\1\17\1\12\20\17\1\12\1\36\1\12\1\13"+
    "\1\37\1\40\1\13\2\40\1\13\11\37\1\41\33\37"+
    "\1\40\1\12\5\13\11\12\1\16\6\12\1\42\1\12"+
    "\20\42\3\12\1\13\1\43\1\13\2\44\1\13\1\44"+
    "\11\43\1\45\33\43\1\44\6\46\1\47\2\46\1\50"+
    "\5\46\1\51\30\46\1\52\1\46\1\53\1\46\1\12"+
    "\5\13\11\12\1\16\30\12\1\54\2\12\1\13\1\12"+
    "\5\13\11\12\1\16\32\12\1\55\1\13\55\0\5\13"+
    "\45\0\1\13\14\0\1\56\2\0\1\57\54\0\1\17"+
    "\5\0\1\17\1\0\20\17\45\0\1\60\56\0\1\61"+
    "\45\0\1\62\57\0\1\63\35\0\1\64\50\0\1\65"+
    "\32\0\2\37\1\0\2\37\1\0\47\37\1\40\1\13"+
    "\2\40\1\13\45\37\1\40\2\37\1\0\2\37\1\0"+
    "\6\37\1\66\2\37\1\67\34\37\20\0\1\42\5\0"+
    "\1\42\1\0\20\42\4\0\1\70\1\0\2\70\1\0"+
    "\50\70\1\13\2\44\1\13\1\44\45\70\1\44\1\70"+
    "\1\0\2\70\1\0\7\70\1\71\2\70\1\72\34\70"+
    "\6\46\1\73\2\46\1\74\5\46\1\75\30\46\1\0"+
    "\1\46\1\0\1\46\2\73\4\0\1\46\2\73\1\0"+
    "\15\73\1\0\24\73\2\74\5\0\2\74\1\46\15\74"+
    "\1\0\24\74\14\46\1\76\2\46\1\77\34\46\14\0"+
    "\1\100\37\0\2\57\1\0\51\57\31\0\1\101\52\0"+
    "\1\102\60\0\1\103\54\0\1\104\15\0\2\37\1\0"+
    "\2\37\1\0\6\37\1\105\37\37\2\67\1\0\2\67"+
    "\1\57\46\67\1\70\1\0\2\70\1\0\7\70\1\106"+
    "\37\70\1\72\1\57\1\70\1\72\1\57\47\72\14\46"+
    "\1\107\2\46\1\110\34\46\14\107\1\111\37\107\2\77"+
    "\1\46\3\112\11\77\1\113\34\77\14\100\1\114\37\100"+
    "\37\0\1\115\50\0\1\116\62\0\1\117\43\0\1\120"+
    "\20\0\2\105\1\100\2\105\1\100\6\105\1\121\37\105"+
    "\1\106\1\100\2\106\1\100\7\106\1\122\37\106\14\107"+
    "\1\123\37\107\2\110\4\46\11\110\1\124\34\110\14\125"+
    "\1\126\2\125\1\127\34\125\2\112\1\46\3\112\1\130"+
    "\2\112\1\131\5\112\1\132\30\112\1\57\1\112\1\57"+
    "\1\112\2\77\1\46\3\112\6\77\1\133\2\77\1\113"+
    "\34\77\17\100\1\134\34\100\47\0\1\135\44\0\1\136"+
    "\54\0\1\137\12\0\2\105\1\100\2\105\1\100\11\105"+
    "\1\37\34\105\1\106\1\100\2\106\1\100\12\106\1\70"+
    "\34\106\14\107\1\123\2\107\1\46\34\107\2\110\4\46"+
    "\6\110\1\140\2\110\1\124\34\110\14\125\1\126\53\125"+
    "\1\111\2\125\1\46\34\125\6\127\1\141\2\127\1\142"+
    "\2\127\1\143\2\127\1\144\30\127\1\100\1\127\1\100"+
    "\1\127\2\130\1\0\3\57\1\112\2\130\1\57\15\130"+
    "\1\57\24\130\2\131\1\0\4\57\2\131\1\112\15\131"+
    "\1\57\24\131\2\112\1\46\11\112\1\145\2\112\1\77"+
    "\34\112\2\133\1\146\3\147\6\133\1\150\2\133\1\151"+
    "\34\133\32\0\1\152\51\0\1\153\23\0\2\140\4\146"+
    "\6\140\1\154\2\140\1\155\34\140\2\141\4\100\1\127"+
    "\2\141\1\100\2\141\1\156\12\141\1\100\24\141\2\142"+
    "\5\100\2\142\1\127\2\142\1\157\12\142\1\100\24\142"+
    "\6\127\1\141\2\127\1\142\5\127\1\160\30\127\1\100"+
    "\1\127\1\100\15\127\1\161\2\127\1\162\34\127\2\145"+
    "\1\107\11\145\1\163\37\145\6\146\1\164\2\146\1\165"+
    "\2\146\1\166\2\146\1\167\30\146\1\107\1\146\1\107"+
    "\1\146\2\147\1\146\3\147\1\170\2\147\1\171\2\147"+
    "\1\172\2\147\1\173\30\147\1\145\1\147\1\145\1\147"+
    "\2\133\1\146\3\147\6\133\1\150\2\133\1\113\36\133"+
    "\1\146\3\147\11\133\1\151\34\133\33\0\1\174\20\0"+
    "\2\140\4\146\6\140\1\154\2\140\1\124\36\140\4\146"+
    "\11\140\1\155\34\140\2\141\4\100\1\127\2\141\1\100"+
    "\5\141\1\175\7\141\1\100\24\141\2\142\5\100\2\142"+
    "\1\127\5\142\1\176\7\142\1\100\24\142\14\125\1\111"+
    "\2\125\1\177\34\125\2\162\4\127\6\162\1\200\2\162"+
    "\1\201\34\162\2\145\1\107\11\145\1\163\2\145\1\112"+
    "\34\145\2\164\4\107\1\146\2\164\1\107\2\164\1\202"+
    "\12\164\1\107\24\164\2\165\5\107\2\165\1\146\2\165"+
    "\1\203\12\165\1\107\24\165\6\146\1\164\2\146\1\165"+
    "\2\146\1\166\2\146\1\204\30\146\1\107\1\146\1\107"+
    "\15\146\1\205\2\146\1\140\34\146\2\170\1\107\3\145"+
    "\1\147\2\170\1\145\2\170\1\206\12\170\1\145\24\170"+
    "\2\171\1\107\4\145\2\171\1\147\2\171\1\207\12\171"+
    "\1\145\24\171\2\147\1\146\3\147\1\170\2\147\1\171"+
    "\2\147\1\172\2\147\1\210\30\147\1\145\1\147\1\145"+
    "\3\147\1\146\11\147\1\211\2\147\1\133\34\147\2\162"+
    "\4\127\11\162\1\124\36\162\4\127\6\162\1\212\2\162"+
    "\1\201\34\162\2\164\4\107\1\146\2\164\1\107\2\164"+
    "\1\202\2\164\1\213\7\164\1\107\24\164\2\165\5\107"+
    "\2\165\1\146\2\165\1\203\2\165\1\214\7\165\1\107"+
    "\24\165\6\46\1\213\2\46\1\214\2\46\1\146\2\46"+
    "\1\124\34\46\14\107\1\123\2\107\1\146\34\107\2\170"+
    "\1\107\3\145\1\147\2\170\1\145\2\170\1\206\2\170"+
    "\1\215\7\170\1\145\24\170\2\171\1\107\4\145\2\171"+
    "\1\147\2\171\1\207\2\171\1\216\7\171\1\145\24\171"+
    "\2\112\1\46\3\112\1\215\2\112\1\216\2\112\1\147"+
    "\2\112\1\113\34\112\2\145\1\107\11\145\1\163\2\145"+
    "\1\147\34\145\2\217\4\220\6\217\1\221\2\217\1\155"+
    "\34\217\2\213\4\46\3\213\1\74\5\213\1\222\7\213"+
    "\1\46\20\213\1\73\1\213\1\73\1\213\2\214\4\46"+
    "\1\73\10\214\1\223\7\214\1\46\20\214\1\74\1\214"+
    "\1\74\1\214\2\215\1\46\3\112\3\215\1\131\5\215"+
    "\1\224\7\215\1\112\20\215\1\130\1\215\1\130\1\215"+
    "\2\216\1\46\3\112\1\130\10\216\1\225\7\216\1\112"+
    "\20\216\1\131\1\216\1\131\1\216\2\217\4\220\6\217"+
    "\1\226\2\217\1\227\34\217\6\220\1\230\2\220\1\231"+
    "\2\220\1\232\2\220\1\233\30\220\1\125\1\220\1\125"+
    "\1\220\2\217\4\220\6\217\1\226\2\217\1\201\34\217"+
    "\2\213\5\46\2\213\1\46\2\213\1\164\2\213\1\110"+
    "\7\213\1\46\24\213\2\214\5\46\2\214\1\46\2\214"+
    "\1\165\2\214\1\110\7\214\1\46\24\214\2\215\1\46"+
    "\4\112\2\215\1\112\2\215\1\170\2\215\1\77\7\215"+
    "\1\112\24\215\2\216\1\46\4\112\2\216\1\112\2\216"+
    "\1\171\2\216\1\77\7\216\1\112\24\216\2\217\4\220"+
    "\6\217\1\221\2\217\1\124\36\217\4\220\6\217\1\212"+
    "\2\217\1\227\34\217\2\230\4\125\1\220\2\230\1\125"+
    "\2\230\1\234\12\230\1\125\24\230\2\231\5\125\2\231"+
    "\1\220\2\231\1\235\12\231\1\125\24\231\6\220\1\230"+
    "\2\220\1\231\2\220\1\236\2\220\1\204\30\220\1\125"+
    "\1\220\1\125\15\220\1\237\2\220\1\217\34\220\2\230"+
    "\4\125\1\220\2\230\1\125\2\230\1\240\2\230\1\213"+
    "\7\230\1\125\24\230\2\231\5\125\2\231\1\220\2\231"+
    "\1\241\2\231\1\214\7\231\1\125\24\231\6\220\1\230"+
    "\2\220\1\231\2\220\1\232\2\220\1\242\30\220\1\125"+
    "\1\220\1\125\1\220\14\125\1\111\2\125\1\146\34\125"+
    "\2\230\4\125\1\220\2\230\1\125\2\230\1\234\2\230"+
    "\1\243\7\230\1\125\24\230\2\231\5\125\2\231\1\220"+
    "\2\231\1\235\2\231\1\244\7\231\1\125\24\231\6\127"+
    "\1\243\2\127\1\244\2\127\1\245\2\127\1\201\34\127"+
    "\2\243\4\127\3\243\1\142\2\243\1\246\2\243\1\247"+
    "\7\243\1\127\20\243\1\141\1\243\1\141\1\243\2\244"+
    "\4\127\1\141\5\244\1\250\2\244\1\251\7\244\1\127"+
    "\20\244\1\142\1\244\1\142\1\244\6\220\1\230\2\220"+
    "\1\231\2\220\1\236\2\220\1\252\30\220\1\125\1\220"+
    "\1\125\1\220\2\243\4\127\3\243\1\142\5\243\1\253"+
    "\7\243\1\127\20\243\1\141\1\243\1\141\3\243\5\127"+
    "\2\243\1\127\2\243\1\254\2\243\1\162\7\243\1\127"+
    "\24\243\2\244\4\127\1\141\10\244\1\255\7\244\1\127"+
    "\20\244\1\142\1\244\1\142\3\244\5\127\2\244\1\127"+
    "\2\244\1\256\2\244\1\162\7\244\1\127\24\244\2\230"+
    "\4\125\1\220\2\230\1\125\2\230\1\240\2\230\1\257"+
    "\7\230\1\125\24\230\2\231\5\125\2\231\1\220\2\231"+
    "\1\241\2\231\1\260\7\231\1\125\24\231";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6248];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\0\1\11\1\1\2\11\6\1\4\11\2\1\5\11"+
    "\13\1\4\11\1\0\1\1\4\0\2\11\5\1\4\0"+
    "\1\1\5\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\1\11\1\0\2\1\1\0\1\1\2\0\5\1\1\11"+
    "\2\0\1\11\1\1\2\0\1\1\1\0\5\1\1\0"+
    "\1\11\2\1\2\0\1\1\1\0\2\1\2\0\1\1"+
    "\1\0\4\1\1\11\5\1\2\0\1\1\1\0\14\1"+
    "\2\0\4\1\2\0\1\1\3\0\1\1\3\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[176];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    int braceCount;
    private Stack<Integer> stack = new Stack<>();

    public void yycleanState(int newState) {
        stack.clear();
        yypushState(newState);
    }

    public void yypushState(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopState() {
        yybegin(stack.pop());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhplrtLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 30: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 31: break;
          case 3:
            { yypushState(RULE_DECLARATION); return PhplrtTypes.SHARP;
            }
          // fall through
          case 32: break;
          case 4:
            { yypushState(META_DECLARATION); return PhplrtTypes.META_START;
            }
          // fall through
          case 33: break;
          case 5:
            { yypushState(RULE_DECLARATION); return PhplrtTypes.LITERAL;
            }
          // fall through
          case 34: break;
          case 6:
            { return PhplrtTypes.PARENTHESES_OPEN;
            }
          // fall through
          case 35: break;
          case 7:
            { return PhplrtTypes.PARENTHESES_CLOSE;
            }
          // fall through
          case 36: break;
          case 8:
            { return PhplrtTypes.QUANTIFIER_ANY;
            }
          // fall through
          case 37: break;
          case 9:
            { return PhplrtTypes.QUANTIFIER_ONE_INFINITE;
            }
          // fall through
          case 38: break;
          case 10:
            { return PhplrtTypes.COLON;
            }
          // fall through
          case 39: break;
          case 11:
            { yycleanState(YYINITIAL); return PhplrtTypes.SEMICOLON;
            }
          // fall through
          case 40: break;
          case 12:
            { return PhplrtTypes.LEFT_ARROW;
            }
          // fall through
          case 41: break;
          case 13:
            { return PhplrtTypes.RIGHT_ARROW;
            }
          // fall through
          case 42: break;
          case 14:
            { return PhplrtTypes.QUANTIFIER_ZERO_ONE;
            }
          // fall through
          case 43: break;
          case 15:
            { return PhplrtTypes.OP_OR;
            }
          // fall through
          case 44: break;
          case 16:
            { yycleanState(YYINITIAL); return PhplrtTypes.VALUE;
            }
          // fall through
          case 45: break;
          case 17:
            { yypushState(WAITING_VALUE); return PhplrtTypes.LITERAL;
            }
          // fall through
          case 46: break;
          case 18:
            { 
            }
          // fall through
          case 47: break;
          case 19:
            { braceCount++;
            }
          // fall through
          case 48: break;
          case 20:
            { if (braceCount > 0) braceCount--; else { yypushback(1); yypushState(AFTER_INLINE_CODE); return PhplrtTypes.INLINE_CODE; }
            }
          // fall through
          case 49: break;
          case 21:
            { yypushState(INLINE_CODE);
            }
          // fall through
          case 50: break;
          case 22:
            { yypushState(RULE_DECLARATION);
            }
          // fall through
          case 51: break;
          case 23:
            { return PhplrtTypes.COMMENT;
            }
          // fall through
          case 52: break;
          case 24:
            { yypushState(BEFORE_INLINE_CODE); return PhplrtTypes.CODE_DELIMITER;
            }
          // fall through
          case 53: break;
          case 25:
            { return PhplrtTypes.DOUBLE_COLON;
            }
          // fall through
          case 54: break;
          case 26:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.SKIP;
            }
          // fall through
          case 55: break;
          case 27:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.TOKEN;
            }
          // fall through
          case 56: break;
          case 28:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.PRAGMA;
            }
          // fall through
          case 57: break;
          case 29:
            { yypushState(WAITING_PATH); return PhplrtTypes.INCLUDE;
            }
          // fall through
          case 58: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
