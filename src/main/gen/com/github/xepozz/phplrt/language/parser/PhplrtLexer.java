// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Phplrt.flex

package com.github.xepozz.phplrt.language.parser;

import com.intellij.psi.tree.IElementType;
import com.github.xepozz.phplrt.psi.PhplrtTypes;
import com.intellij.psi.TokenType;
import com.intellij.lexer.FlexLexer;
import java.util.Stack;


public class PhplrtLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int META_DECLARATION = 2;
  public static final int RULE_DECLARATION = 4;
  public static final int WAITING_VALUE = 6;
  public static final int WAITING_LITERAL = 8;
  public static final int WAITING_PATH = 10;
  public static final int INLINE_CODE = 12;
  public static final int BEFORE_INLINE_CODE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\1"+
    "\1\0\1\6\1\7\1\0\1\10\1\0\1\11\1\12"+
    "\1\13\1\14\1\15\1\0\1\16\1\0\1\17\12\20"+
    "\1\21\1\22\1\23\1\0\1\24\1\25\1\0\32\26"+
    "\1\0\1\27\2\0\1\26\1\0\1\30\1\26\1\31"+
    "\1\32\1\33\1\26\1\34\1\26\1\35\1\26\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\26\1\44\1\45"+
    "\1\46\1\47\5\26\1\50\1\51\1\52\7\0\1\3"+
    "\32\0\1\53\u01df\0\1\53\177\0\13\53\35\0\2\3"+
    "\5\0\1\53\57\0\1\53\240\0\1\53\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\1\1\5\4\1"+
    "\1\6\1\7\1\10\1\11\1\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\2\1\20\1\21\1\20"+
    "\1\2\1\20\1\22\3\1\1\23\1\24\1\25\1\0"+
    "\1\26\4\0\1\27\1\30\4\20\4\0\1\22\5\0"+
    "\2\20\1\0\1\22\1\0\2\22\3\0\1\31\1\0"+
    "\2\20\1\0\1\22\2\0\1\22\3\26\1\22\1\26"+
    "\2\0\1\32\1\22\2\0\1\22\1\0\1\26\4\22"+
    "\1\0\1\33\2\22\2\0\1\26\1\0\1\22\1\26"+
    "\2\0\1\22\1\0\2\26\1\22\1\26\1\34\3\26"+
    "\2\22\2\0\1\22\1\0\2\26\1\22\1\26\10\22"+
    "\2\0\2\26\2\22\2\0\1\22\3\0\1\22\3\0"+
    "\5\22\1\0\1\22\1\0\2\26\1\0\1\26\1\0"+
    "\2\26";

  private static int [] zzUnpackAction() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\204\0\260\0\334\0\u0108\0\u0134"+
    "\0\u0160\0\u018c\0\u0160\0\u0160\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u0160\0\u0160\0\u0160\0\u0160\0\u02c0\0\u02ec"+
    "\0\u0160\0\u0160\0\u0160\0\u0160\0\u0160\0\u0318\0\u0344\0\u0370"+
    "\0\u039c\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0"+
    "\0\u0160\0\u0160\0\u0160\0\u04fc\0\u0528\0\u0554\0\u0580\0\u05ac"+
    "\0\u05d8\0\u0160\0\u0160\0\u0604\0\u0630\0\u065c\0\u0688\0\u0478"+
    "\0\u04a4\0\u06b4\0\u06e0\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc"+
    "\0\u07e8\0\u0814\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c"+
    "\0\u0948\0\u0974\0\u09a0\0\u0160\0\u09cc\0\u09f8\0\u0a24\0\u0a50"+
    "\0\u0a7c\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\u0b84\0\u0bb0"+
    "\0\u0160\0\u0bdc\0\u0c08\0\u0160\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8"+
    "\0\u0ce4\0\u0d10\0\u0d3c\0\u0d68\0\u0d94\0\u0dc0\0\u0dec\0\u0160"+
    "\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u06b4\0\u0ec8\0\u0ef4\0\u0f20"+
    "\0\u0f4c\0\u0f78\0\u0fa4\0\u0fd0\0\u0ffc\0\u1028\0\u1054\0\u1080"+
    "\0\u0160\0\u0478\0\u04a4\0\u086c\0\u10ac\0\u10d8\0\u1104\0\u1130"+
    "\0\u115c\0\u1188\0\u11b4\0\u11e0\0\u120c\0\u1238\0\u1264\0\u1290"+
    "\0\u12bc\0\u12e8\0\u1314\0\u1340\0\u136c\0\u1398\0\u13c4\0\u13f0"+
    "\0\u141c\0\u1448\0\u1474\0\u14a0\0\u14cc\0\u14f8\0\u1524\0\u1550"+
    "\0\u157c\0\u15a8\0\u15d4\0\u1600\0\u162c\0\u1658\0\u1684\0\u16b0"+
    "\0\u16dc\0\u1708\0\u1734\0\u1760\0\u178c\0\u17b8\0\u0fd0\0\u13c4"+
    "\0\u17e4\0\u13f0\0\u1810\0\u0f4c\0\u0f78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\5\12\1\11\1\13\1\14\6\11\1\15\6\11"+
    "\1\16\1\11\20\16\3\11\1\12\1\11\5\12\11\11"+
    "\1\15\15\11\1\17\5\11\1\20\1\11\1\21\1\22"+
    "\4\11\1\12\1\11\5\12\4\11\1\23\1\24\1\25"+
    "\1\26\1\27\1\15\1\11\1\30\1\31\1\32\1\33"+
    "\1\34\1\16\1\11\20\16\1\11\1\35\1\11\1\12"+
    "\1\36\1\37\1\12\2\37\1\12\11\36\1\40\33\36"+
    "\1\37\1\11\5\12\11\11\1\15\6\11\1\41\1\11"+
    "\20\41\3\11\1\12\1\42\2\12\1\43\2\12\11\42"+
    "\1\44\30\42\1\11\1\42\1\11\1\43\6\45\1\46"+
    "\2\45\1\47\5\45\1\50\30\45\1\51\1\45\1\52"+
    "\1\45\1\11\5\12\11\11\1\15\30\11\1\53\2\11"+
    "\1\12\55\0\5\12\45\0\1\12\14\0\1\54\2\0"+
    "\1\55\54\0\1\16\5\0\1\16\1\0\20\16\45\0"+
    "\1\56\56\0\1\57\45\0\1\60\57\0\1\61\35\0"+
    "\1\62\50\0\1\63\32\0\2\36\1\0\2\36\1\0"+
    "\47\36\1\37\1\12\2\37\1\12\45\36\1\37\2\36"+
    "\1\0\2\36\1\0\6\36\1\64\2\36\1\65\34\36"+
    "\20\0\1\41\5\0\1\41\1\0\20\41\4\0\1\42"+
    "\2\0\1\42\2\0\42\42\1\0\1\42\1\0\2\42"+
    "\2\12\1\43\2\12\42\42\1\0\1\42\1\0\1\43"+
    "\1\42\2\0\1\42\2\0\6\42\1\66\2\42\1\67"+
    "\30\42\1\0\1\42\1\0\1\42\6\45\1\70\2\45"+
    "\1\71\5\45\1\72\30\45\1\0\1\45\1\0\1\45"+
    "\2\70\4\0\1\45\2\70\1\0\15\70\1\0\24\70"+
    "\2\71\5\0\2\71\1\45\15\71\1\0\24\71\14\45"+
    "\1\73\2\45\1\74\34\45\14\0\1\75\37\0\2\55"+
    "\1\0\51\55\31\0\1\76\52\0\1\77\60\0\1\100"+
    "\54\0\1\101\15\0\2\36\1\0\2\36\1\0\6\36"+
    "\1\102\37\36\2\65\1\0\2\65\1\55\46\65\1\42"+
    "\2\0\1\42\2\0\6\42\1\103\33\42\1\0\1\42"+
    "\1\0\1\42\1\67\1\55\1\0\1\67\2\55\42\67"+
    "\1\55\1\67\1\55\1\67\14\45\1\104\2\45\1\105"+
    "\34\45\14\104\1\106\37\104\2\74\1\45\3\107\11\74"+
    "\1\110\34\74\14\75\1\111\37\75\37\0\1\112\50\0"+
    "\1\113\62\0\1\114\43\0\1\115\20\0\2\102\1\75"+
    "\2\102\1\75\6\102\1\116\37\102\1\103\2\75\1\103"+
    "\2\75\6\103\1\117\33\103\1\75\1\103\1\75\1\103"+
    "\14\104\1\120\37\104\2\105\4\45\11\105\1\121\34\105"+
    "\14\122\1\123\2\122\1\124\34\122\2\107\1\45\3\107"+
    "\1\125\2\107\1\126\5\107\1\127\30\107\1\55\1\107"+
    "\1\55\1\107\2\74\1\45\3\107\6\74\1\130\2\74"+
    "\1\110\34\74\17\75\1\131\34\75\47\0\1\132\44\0"+
    "\1\133\54\0\1\134\12\0\2\102\1\75\2\102\1\75"+
    "\11\102\1\36\34\102\1\103\2\75\1\103\2\75\11\103"+
    "\1\42\30\103\1\75\1\103\1\75\1\103\14\104\1\120"+
    "\2\104\1\45\34\104\2\105\4\45\6\105\1\135\2\105"+
    "\1\121\34\105\14\122\1\123\53\122\1\106\2\122\1\45"+
    "\34\122\6\124\1\136\2\124\1\137\2\124\1\140\2\124"+
    "\1\141\30\124\1\75\1\124\1\75\1\124\2\125\1\0"+
    "\3\55\1\107\2\125\1\55\15\125\1\55\24\125\2\126"+
    "\1\0\4\55\2\126\1\107\15\126\1\55\24\126\2\107"+
    "\1\45\11\107\1\142\2\107\1\74\34\107\2\130\1\143"+
    "\3\144\6\130\1\145\2\130\1\146\34\130\32\0\1\147"+
    "\51\0\1\150\23\0\2\135\4\143\6\135\1\151\2\135"+
    "\1\152\34\135\2\136\4\75\1\124\2\136\1\75\2\136"+
    "\1\153\12\136\1\75\24\136\2\137\5\75\2\137\1\124"+
    "\2\137\1\154\12\137\1\75\24\137\6\124\1\136\2\124"+
    "\1\137\5\124\1\155\30\124\1\75\1\124\1\75\15\124"+
    "\1\156\2\124\1\157\34\124\2\142\1\104\11\142\1\160"+
    "\37\142\6\143\1\161\2\143\1\162\2\143\1\163\2\143"+
    "\1\164\30\143\1\104\1\143\1\104\1\143\2\144\1\143"+
    "\3\144\1\165\2\144\1\166\2\144\1\167\2\144\1\170"+
    "\30\144\1\142\1\144\1\142\1\144\2\130\1\143\3\144"+
    "\6\130\1\145\2\130\1\110\36\130\1\143\3\144\11\130"+
    "\1\146\34\130\33\0\1\171\20\0\2\135\4\143\6\135"+
    "\1\151\2\135\1\121\36\135\4\143\11\135\1\152\34\135"+
    "\2\136\4\75\1\124\2\136\1\75\5\136\1\172\7\136"+
    "\1\75\24\136\2\137\5\75\2\137\1\124\5\137\1\173"+
    "\7\137\1\75\24\137\14\122\1\106\2\122\1\174\34\122"+
    "\2\157\4\124\6\157\1\175\2\157\1\176\34\157\2\142"+
    "\1\104\11\142\1\160\2\142\1\107\34\142\2\161\4\104"+
    "\1\143\2\161\1\104\2\161\1\177\12\161\1\104\24\161"+
    "\2\162\5\104\2\162\1\143\2\162\1\200\12\162\1\104"+
    "\24\162\6\143\1\161\2\143\1\162\2\143\1\163\2\143"+
    "\1\201\30\143\1\104\1\143\1\104\15\143\1\202\2\143"+
    "\1\135\34\143\2\165\1\104\3\142\1\144\2\165\1\142"+
    "\2\165\1\203\12\165\1\142\24\165\2\166\1\104\4\142"+
    "\2\166\1\144\2\166\1\204\12\166\1\142\24\166\2\144"+
    "\1\143\3\144\1\165\2\144\1\166\2\144\1\167\2\144"+
    "\1\205\30\144\1\142\1\144\1\142\3\144\1\143\11\144"+
    "\1\206\2\144\1\130\34\144\2\157\4\124\11\157\1\121"+
    "\36\157\4\124\6\157\1\207\2\157\1\176\34\157\2\161"+
    "\4\104\1\143\2\161\1\104\2\161\1\177\2\161\1\210"+
    "\7\161\1\104\24\161\2\162\5\104\2\162\1\143\2\162"+
    "\1\200\2\162\1\211\7\162\1\104\24\162\6\45\1\210"+
    "\2\45\1\211\2\45\1\143\2\45\1\121\34\45\14\104"+
    "\1\120\2\104\1\143\34\104\2\165\1\104\3\142\1\144"+
    "\2\165\1\142\2\165\1\203\2\165\1\212\7\165\1\142"+
    "\24\165\2\166\1\104\4\142\2\166\1\144\2\166\1\204"+
    "\2\166\1\213\7\166\1\142\24\166\2\107\1\45\3\107"+
    "\1\212\2\107\1\213\2\107\1\144\2\107\1\110\34\107"+
    "\2\142\1\104\11\142\1\160\2\142\1\144\34\142\2\214"+
    "\4\215\6\214\1\216\2\214\1\152\34\214\2\210\4\45"+
    "\3\210\1\71\5\210\1\217\7\210\1\45\20\210\1\70"+
    "\1\210\1\70\1\210\2\211\4\45\1\70\10\211\1\220"+
    "\7\211\1\45\20\211\1\71\1\211\1\71\1\211\2\212"+
    "\1\45\3\107\3\212\1\126\5\212\1\221\7\212\1\107"+
    "\20\212\1\125\1\212\1\125\1\212\2\213\1\45\3\107"+
    "\1\125\10\213\1\222\7\213\1\107\20\213\1\126\1\213"+
    "\1\126\1\213\2\214\4\215\6\214\1\223\2\214\1\224"+
    "\34\214\6\215\1\225\2\215\1\226\2\215\1\227\2\215"+
    "\1\230\30\215\1\122\1\215\1\122\1\215\2\214\4\215"+
    "\6\214\1\223\2\214\1\176\34\214\2\210\5\45\2\210"+
    "\1\45\2\210\1\161\2\210\1\105\7\210\1\45\24\210"+
    "\2\211\5\45\2\211\1\45\2\211\1\162\2\211\1\105"+
    "\7\211\1\45\24\211\2\212\1\45\4\107\2\212\1\107"+
    "\2\212\1\165\2\212\1\74\7\212\1\107\24\212\2\213"+
    "\1\45\4\107\2\213\1\107\2\213\1\166\2\213\1\74"+
    "\7\213\1\107\24\213\2\214\4\215\6\214\1\216\2\214"+
    "\1\121\36\214\4\215\6\214\1\207\2\214\1\224\34\214"+
    "\2\225\4\122\1\215\2\225\1\122\2\225\1\231\12\225"+
    "\1\122\24\225\2\226\5\122\2\226\1\215\2\226\1\232"+
    "\12\226\1\122\24\226\6\215\1\225\2\215\1\226\2\215"+
    "\1\233\2\215\1\201\30\215\1\122\1\215\1\122\15\215"+
    "\1\234\2\215\1\214\34\215\2\225\4\122\1\215\2\225"+
    "\1\122\2\225\1\235\2\225\1\210\7\225\1\122\24\225"+
    "\2\226\5\122\2\226\1\215\2\226\1\236\2\226\1\211"+
    "\7\226\1\122\24\226\6\215\1\225\2\215\1\226\2\215"+
    "\1\227\2\215\1\237\30\215\1\122\1\215\1\122\1\215"+
    "\14\122\1\106\2\122\1\143\34\122\2\225\4\122\1\215"+
    "\2\225\1\122\2\225\1\231\2\225\1\240\7\225\1\122"+
    "\24\225\2\226\5\122\2\226\1\215\2\226\1\232\2\226"+
    "\1\241\7\226\1\122\24\226\6\124\1\240\2\124\1\241"+
    "\2\124\1\242\2\124\1\176\34\124\2\240\4\124\3\240"+
    "\1\137\2\240\1\243\2\240\1\244\7\240\1\124\20\240"+
    "\1\136\1\240\1\136\1\240\2\241\4\124\1\136\5\241"+
    "\1\245\2\241\1\246\7\241\1\124\20\241\1\137\1\241"+
    "\1\137\1\241\6\215\1\225\2\215\1\226\2\215\1\233"+
    "\2\215\1\247\30\215\1\122\1\215\1\122\1\215\2\240"+
    "\4\124\3\240\1\137\5\240\1\250\7\240\1\124\20\240"+
    "\1\136\1\240\1\136\3\240\5\124\2\240\1\124\2\240"+
    "\1\251\2\240\1\157\7\240\1\124\24\240\2\241\4\124"+
    "\1\136\10\241\1\252\7\241\1\124\20\241\1\137\1\241"+
    "\1\137\3\241\5\124\2\241\1\124\2\241\1\253\2\241"+
    "\1\157\7\241\1\124\24\241\2\225\4\122\1\215\2\225"+
    "\1\122\2\225\1\235\2\225\1\254\7\225\1\122\24\225"+
    "\2\226\5\122\2\226\1\215\2\226\1\236\2\226\1\255"+
    "\7\226\1\122\24\226";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6204];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\1\1\2\11\6\1\4\11\2\1\5\11"+
    "\13\1\3\11\1\0\1\1\4\0\2\11\4\1\4\0"+
    "\1\1\5\0\2\1\1\0\1\1\1\0\2\1\3\0"+
    "\1\11\1\0\2\1\1\0\1\1\2\0\5\1\1\11"+
    "\2\0\1\11\1\1\2\0\1\1\1\0\5\1\1\0"+
    "\1\11\2\1\2\0\1\1\1\0\2\1\2\0\1\1"+
    "\1\0\4\1\1\11\5\1\2\0\1\1\1\0\14\1"+
    "\2\0\4\1\2\0\1\1\3\0\1\1\3\0\5\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[173];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    int braceCount;
    private Stack<Integer> stack = new Stack<>();

    public void yycleanState(int newState) {
        stack.clear();
        yypushState(newState);
    }

    public void yypushState(int newState) {
        stack.push(yystate());
        yybegin(newState);
    }

    public void yypopState() {
        yybegin(stack.pop());
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PhplrtLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 29: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 30: break;
          case 3:
            { yypushState(RULE_DECLARATION); return PhplrtTypes.SHARP;
            }
          // fall through
          case 31: break;
          case 4:
            { yypushState(META_DECLARATION); return PhplrtTypes.META_START;
            }
          // fall through
          case 32: break;
          case 5:
            { yypushState(RULE_DECLARATION); return PhplrtTypes.LITERAL;
            }
          // fall through
          case 33: break;
          case 6:
            { return PhplrtTypes.PARENTHESES_OPEN;
            }
          // fall through
          case 34: break;
          case 7:
            { return PhplrtTypes.PARENTHESES_CLOSE;
            }
          // fall through
          case 35: break;
          case 8:
            { return PhplrtTypes.QUANTIFIER_ANY;
            }
          // fall through
          case 36: break;
          case 9:
            { return PhplrtTypes.QUANTIFIER_ONE_INFINITE;
            }
          // fall through
          case 37: break;
          case 10:
            { return PhplrtTypes.COLON;
            }
          // fall through
          case 38: break;
          case 11:
            { yycleanState(YYINITIAL); return PhplrtTypes.SEMICOLON;
            }
          // fall through
          case 39: break;
          case 12:
            { return PhplrtTypes.LEFT_ARROW;
            }
          // fall through
          case 40: break;
          case 13:
            { return PhplrtTypes.RIGHT_ARROW;
            }
          // fall through
          case 41: break;
          case 14:
            { return PhplrtTypes.QUANTIFIER_ZERO_ONE;
            }
          // fall through
          case 42: break;
          case 15:
            { return PhplrtTypes.OP_OR;
            }
          // fall through
          case 43: break;
          case 16:
            { yycleanState(YYINITIAL); return PhplrtTypes.VALUE;
            }
          // fall through
          case 44: break;
          case 17:
            { yypushState(WAITING_VALUE); return PhplrtTypes.LITERAL;
            }
          // fall through
          case 45: break;
          case 18:
            { 
            }
          // fall through
          case 46: break;
          case 19:
            { braceCount++;
            }
          // fall through
          case 47: break;
          case 20:
            { if (braceCount > 0) braceCount--; else { yypushState(RULE_DECLARATION); return PhplrtTypes.INLINE_CODE; }
            }
          // fall through
          case 48: break;
          case 21:
            { yypushState(INLINE_CODE);
            }
          // fall through
          case 49: break;
          case 22:
            { return PhplrtTypes.COMMENT;
            }
          // fall through
          case 50: break;
          case 23:
            { yypushState(BEFORE_INLINE_CODE); return PhplrtTypes.CODE_DELIMITER;
            }
          // fall through
          case 51: break;
          case 24:
            { return PhplrtTypes.DOUBLE_COLON;
            }
          // fall through
          case 52: break;
          case 25:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.SKIP;
            }
          // fall through
          case 53: break;
          case 26:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.TOKEN;
            }
          // fall through
          case 54: break;
          case 27:
            { yypushState(WAITING_LITERAL); return PhplrtTypes.PRAGMA;
            }
          // fall through
          case 55: break;
          case 28:
            { yypushState(WAITING_PATH); return PhplrtTypes.INCLUDE;
            }
          // fall through
          case 56: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
